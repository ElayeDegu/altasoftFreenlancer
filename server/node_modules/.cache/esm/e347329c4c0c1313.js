let express,cors,readdirSync,mongoose,csrf,cookieParser;_4c0‍.w("express",[["default",["express"],function(v){express=v}]]);_4c0‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_4c0‍.w("fs",[["readdirSync",["readdirSync"],function(v){readdirSync=v}]]);_4c0‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_4c0‍.w("csurf",[["default",["csrf"],function(v){csrf=v}]]);_4c0‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);





const morgan = require("morgan");
const bodyParser = require("body-parser");
require("dotenv").config();

const csrfProtection = csrf({ cookie: true });

// create express app
const app = express();

// db
mongoose
    .connect(process.env.DATABASE, {
    })
    .then(() => console.log("**DB CONNECTED**"))
    .catch((err) => _4c0‍.g.console.log("DB CONNECTION ERR => ", err));

// apply middlewares
app.use(cors());
app.use(express.json({ limit: "5mb" }));
app.use(cookieParser());
app.use(morgan("dev"));

app.use(bodyParser.json());

app.use(bodyParser.urlencoded({ extended: true }));

// route
readdirSync("./routes").map((r) => app.use("/api", require(`./routes/${r}`)));
// csrf
app.use(csrfProtection);

app.get("/api/csrf-token", (req, res) => {
    res.json({ csrfToken: req.csrfToken() });
});

// port
const port = process.env.PORT || 8000;

app.listen(port, () => console.log(`Server is running on port ${port}`));
