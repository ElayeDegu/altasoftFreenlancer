let User,hashPassword,comparePassword,jwt,nanoid,AWS;_55d‍.x([["register",()=>register],["login",()=>login],["logout",()=>logout],["currentUser",()=>currentUser],["forgotPassword",()=>forgotPassword],["resetPassword",()=>resetPassword]]);_55d‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_55d‍.w("../utils/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);_55d‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_55d‍.w("nanoid",[["default",["nanoid"],function(v){nanoid=v}]]);_55d‍.w("aws-sdk",[["default",["AWS"],function(v){AWS=v}]]);





const awsConfig = {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION,
    apiVersion: process.env.AWS_API_VERSION,
};

const SES = new AWS.SES(awsConfig);

       const register = async (req, res) => {
    try {
        const { firstName, lastName, email, password } = req.body;
        // validation
        if (!firstName || !lastName) return res.status(400).send("Name is required");
        if (!password || password.length < 8) {
            return res
                .status(400)
                .send("Password is required and should be min 8 characters long");
        }
        let userExist = await User.findOne({ email }).exec();
        if (userExist) return res.status(400).send("Email is taken");

        // hash password
        const hashedPassword = await hashPassword(password);

        // register
        const user = new User({
            firstName,
            lastName,
            email,
            password: hashedPassword,
        });
        await user.save();
        // console.log("saved user", user);
        return res.json({ ok: true });
    } catch (err) {
        _55d‍.g.console.log(err);
        return res.status(400).send("Error. Try again.");
    }
};

       const login = async (req, res) => {
    try {
        // console.log(req.body);
        const { email, password } = req.body;
        // check if our db has user with that email
        const user = await User.findOne({ email }).exec();
        if (!user) return res.status(400).send("No user found");
        // check password
        const match = await comparePassword(password, user.password);
        if (!match) return res.status(400).send("Wrong password");
        // create signed jwt
        const token = jwt.sign({ _id: user._id }, process.env.JWT_SECRET, {
            expiresIn: "7d",
        });
        // return user and token to client, exclude hashed password
        user.password = undefined;
        // send token in cookie
        res.cookie("token", token, {
            httpOnly: true,
            // secure: true, // only works on https
        });
        // send user as json response
        res.json(user);
    } catch (err) {
        _55d‍.g.console.log(err);
        return res.status(400).send("Error. Try again.");
    }
};

       const logout = async (req, res) => {
    try {
        res.clearCookie("token");
        return res.json({ message: "Signout success" });
    } catch (err) {
        _55d‍.g.console.log(err);
    }
};

       const currentUser = async (req, res) => {
    try {
        // console.log("test", req.auth._id);
        const user = await User.findById(req.auth._id).select("-password").exec();
        _55d‍.g.console.log("CURRENT_USER", user);
        return res.json({ ok: true });
    } catch (err) {
        _55d‍.g.console.log(err);
    }
};

       const forgotPassword = async (req, res) => {
    try {
        const { email } = req.body;
        // console.log(email);
        const shortCode = nanoid(6).toUpperCase();
        const user = await User.findOneAndUpdate(
            { email },
            { passwordResetCode: shortCode }
        );
        if (!user) return res.status(400).send("User not found");

        // prepare for email
        const params = {
            Source: process.env.EMAIL_FROM,
            Destination: {
                ToAddresses: [email],
            },
            Message: {
                Body: {
                    Html: {
                        Charset: "UTF-8",
                        Data: `
                  <html>
                    <h1>Reset password</h1>
                    <p>Use this code to reset your password</p>
                    <h2 style="color:red;">${shortCode}</h2>
                    <i>altasoft.com</i>
                  </html>
                `,
                    },
                },
                Subject: {
                    Charset: "UTF-8",
                    Data: "Reset Password",
                },
            },
        };

        const emailSent = SES.sendEmail(params).promise();
        emailSent
            .then((data) => {
                _55d‍.g.console.log(data);
                res.json({ ok: true });
            })
            .catch((err) => {
                _55d‍.g.console.log(err);
            });
    } catch (err) {
        _55d‍.g.console.log(err);
    }
};

       const resetPassword = async (req, res) => {
    try {
        const { email, code, newPassword } = req.body;
        // console.table({ email, code, newPassword });
        const hashedPassword = await hashPassword(newPassword);

        const user = User.findOneAndUpdate(
            {
                email,
                passwordResetCode: code,
            },
            {
                password: hashedPassword,
                passwordResetCode: "",
            }
        ).exec();
        res.json({ ok: true });
    } catch (err) {
        _55d‍.g.console.log(err);
        return res.status(400).send("Error! Try again.");
    }
};
